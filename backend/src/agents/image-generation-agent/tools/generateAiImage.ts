import { tool } from '@openai/agents';
import { z } from 'zod';
import { createChatCompletion, generateImage } from '../../../config/ai-service';
import { logger } from '../../../config/logger';

export const generateAiImage = tool({
  name: 'generate_ai_image',
  description: 'Generate AI images using SeeDream 3.0 for vocabulary learning contexts',
  parameters: z.object({
    context: z.string().describe('The vocabulary learning context to create an image for'),
    sessionId: z.string().nullable().describe('Session ID for tracking user images')
  }),
  async execute({ context, sessionId }) {
    try {
      // Create vocabulary-rich prompt for SeeDream 3.0
      const enhancedPrompt = await createVocabularyRichPrompt(context);
      logger.info('üìù Enhanced prompt for SeeDream 3.0:', { prompt: enhancedPrompt });
      
      // ‰ΩøÁî®SeeDream 3.0ÁîüÊàêÂõæÂÉè
      const imageResult = await generateImage(enhancedPrompt, {
        size: '1024x1024',
        quality: 'hd',
        style: 'natural'
      });

      if (!imageResult || (!imageResult.url && !imageResult.buffer)) {
        throw new Error('No image was generated or result is missing');
      }

      const imageId = `seeddream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      return {
        id: imageId,
        url: imageResult.url,
        buffer: imageResult.buffer,
        alt_description: `A detailed scene showing ${context}`,
        description: `AI-generated image depicting ${context} with rich vocabulary opportunities`,
        prompt: enhancedPrompt,
        revisedPrompt: imageResult.revisedPrompt,
        source: 'seeddream' as const,
        metadata: imageResult.metadata
      };
    } catch (error) {
      logger.error('Error generating image with SeeDream 3.0:', error);
      throw new Error(`Failed to generate AI image: ${error instanceof Error ? (error instanceof Error ? error.message : String(error)) : 'Unknown error'}`);
    }
  }
});

async function createVocabularyRichPrompt(context: string): Promise<string> {
  try {
    const prompt = `Create a detailed scene description for SeeDream 3.0 image generation showing: "${context}"

The image should be educational and vocabulary-rich, showing typical objects, tools, and activities related to ${context}.
Make it visually clear and engaging for language learners.

Generate ONLY the scene description, no explanations.`;

    const response = await createChatCompletion([
      { role: "user", content: prompt }
    ], {
      temperature: 0.3,
      max_tokens: 150
    });

    const generatedScene = response.choices[0].message.content?.trim();
    
    if (!generatedScene) {
      throw new Error('No scene generated by AI service');
    }

    // ‰∏∫SeeDream 3.0‰ºòÂåñÁöÑÊèêÁ§∫ËØç
    return `${generatedScene}, educational illustration style, high quality, detailed and clear, rich in visual elements for vocabulary learning, vibrant colors, clean composition`;
    
  } catch (error) {
    logger.error('Error generating prompt with AI service:', error);
    // Â§áÁî®ÊèêÁ§∫ËØç
    return `Educational scene showing ${context}, detailed illustration with multiple objects and elements, high quality, vibrant colors, clear composition, suitable for vocabulary learning`;
  }
}